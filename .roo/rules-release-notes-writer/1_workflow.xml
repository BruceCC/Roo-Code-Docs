<workflow_instructions>
  <mode_overview>
    The Release Notes Writer mode automates the creation of release notes for new versions of Roo Code.
    It fetches pull request information from GitHub, analyzes changes, and generates user-friendly
    release notes following the project's documentation standards.
  </mode_overview>

  <initialization_steps>
    <step number="1">
      <action>Receive version number from user</action>
      <details>
        The user provides the new version number (e.g., 3.20.3) to begin the workflow
      </details>
    </step>
    
    <step number="2">
      <action>Determine version range</action>
      <tools>
        <tool>list_files - Find previous version in docs/update-notes</tool>
      </tools>
      <details>
        List files in docs/update-notes to identify the most recent version file
        and establish the range for fetching changes
      </details>
    </step>
  </initialization_steps>

  <main_workflow>
    <phase name="gather_technical_information">
      <description>Collect PR data from GitHub</description>
      <steps>
        <step number="1">
          <action>Fetch commit SHAs</action>
          <tool>github.get_tag</tool>
          <details>Get commit SHAs for both new and previous version tags</details>
        </step>
        
        <step number="2">
          <action>List commits and extract PR numbers</action>
          <tool>github.list_commits</tool>
          <details>
            Use start and end SHAs to get all commits in the release range.
            Parse commit messages to extract PR numbers (format: "Merge pull request #1234...")
          </details>
        </step>
        
        <step number="3">
          <action>Gather comprehensive PR details</action>
          <tools>
            <tool>github.get_pull_request - Title, author, description</tool>
            <tool>github.get_pull_request_files - Changed files</tool>
            <tool>github.get_pull_request_diff - Code changes</tool>
            <tool>github.get_pull_request_comments - Additional context if needed</tool>
          </tools>
          <details>
            For each PR number, gather all relevant information.
            Store in a temporary file for analysis.
          </details>
        </step>
      </steps>
    </phase>

    <phase name="transform_to_user_benefits">
      <description>Analyze technical changes and convert to user-facing benefits</description>
      <steps>
        <step>Identify what changed (core functionality/feature)</step>
        <step>Understand why it changed (problem being solved)</step>
        <step>Determine user impact (benefits in plain language)</step>
        <step>Categorize changes (features, fixes, improvements)</step>
      </steps>
    </phase>

    <phase name="generate_documentation">
      <description>Create and update all necessary documentation files</description>
      <steps>
        <step number="1">
          <action>Create release notes file</action>
          <details>
            Create docs/update-notes/vX.Y.Z.mdx with proper formatting,
            title, date, and organized sections
          </details>
        </step>
        
        <step number="2">
          <action>Update index.md</action>
          <details>
            Add new release entry to the chronological list with proper link format
          </details>
        </step>
        
        <step number="3">
          <action>Update sidebars.ts</action>
          <details>
            Add the new release to the Update Notes section in the sidebar configuration
          </details>
        </step>
        
        <step number="4">
          <action>Update combined release notes</action>
          <details>
            For patch releases, update the corresponding minor/major release file
            (e.g., update v3.20.mdx when creating v3.20.3.mdx)
          </details>
        </step>
      </steps>
    </phase>
  </main_workflow>

  <completion_criteria>
    <criterion>Release notes file created with proper formatting</criterion>
    <criterion>All PRs analyzed and converted to user benefits</criterion>
    <criterion>Index and sidebar files updated</criterion>
    <criterion>Combined release notes updated (for patch releases)</criterion>
    <criterion>All links and references are correct</criterion>
  </completion_criteria>
</workflow_instructions>