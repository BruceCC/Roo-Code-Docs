<workflow_instructions>
  <mode_overview>
    The Release Notes Writer mode automates the creation of release notes for new versions of Roo Code.
    It fetches pull request information from GitHub, analyzes changes, and generates user-friendly
    release notes following the project's documentation standards.
  </mode_overview>

  <initialization_steps>
    <step number="1">
      <action>Receive version number from user</action>
      <details>
        The user provides the new version number (e.g., 3.20.3) to begin the workflow
      </details>
    </step>
    
    <step number="2">
      <action>Determine version range</action>
      <tools>
        <tool>list_files - Find previous version in docs/update-notes</tool>
      </tools>
      <details>
        List files in docs/update-notes to identify the most recent version file
        and establish the range for fetching changes
      </details>
    </step>
  </initialization_steps>

	<main_workflow>
		<phase name="gather_technical_information">
			<description>Collect PR data from GitHub. This phase is skipped if the user provides a list of PR numbers.</description>
			<steps>
		             <step number="1">
		                 <action>Check for user-provided PR list</action>
		                 <details>If the user provides a list of PR numbers with the version, skip to the 'process_each_pr' phase.</details>
		             </step>
				<step number="2">
					<action>Fetch release dates</action>
					<tool>github.get_tag</tool>
					<details>Get the commit dates for both new and previous version tags to establish a date range.</details>
				</step>
				<step number="3">
					<action>Search for merged PRs within the date range</action>
					<tool>github.search_issues</tool>
					<details>
		          Use the release date range to search for all merged PRs.
		          Example query: `is:pr is:merged repo:RooCodeInc/Roo-Code merged:YYYY-MM-DD..YYYY-MM-DD`
		        </details>
				</step>
			</steps>
		</phase>
		<phase name="process_each_pr">
			<description>Process PRs individually, investigating each one thoroughly and storing findings in a temporary file for later compilation.</description>
			<iterative_workflow>
				<overview>
					For each PR in the list, execute a complete investigation workflow and immediately
					store the findings in a temporary markdown file (e.g., temp_pr_analysis.md).
					This allows for incremental building of release note data.
				</overview>
				
				<per_pr_steps>
					<step number="1">
						<action>Gather comprehensive PR details</action>
						<tools>
							<tool>github.get_pull_request - Title, author, description</tool>
							<tool>github.get_pull_request_files - Changed files (optional)</tool>
							<tool>github.get_pull_request_diff - Code changes (if needed for clarity)</tool>
						</tools>
						<details>Extract PR title, author username, and description for analysis</details>
					</step>
					
					<step number="2">
						<action>Extract and gather linked issue details</action>
						<process>
							<substep>Parse PR description for issue references (Fixes #123, Closes #456, etc.)</substep>
							<substep>For each found issue number, use github.get_issue to gather details</substep>
							<substep>Extract issue reporter username and title for context</substep>
						</process>
						<tools>
							<tool>github.get_issue - For each linked issue found</tool>
						</tools>
					</step>
					
					<step number="3">
						<action>Analyze and categorize the change</action>
						<analysis_framework>
							<question>What changed? (core functionality/feature affected)</question>
							<question>Why did it change? (problem being solved)</question>
							<question>How does this impact users? (benefits in plain language)</question>
							<question>What category? (bug fix, feature, improvement, etc.)</question>
						</analysis_framework>
					</step>
					
					<step number="4">
						<action>Write findings to temporary file</action>
						<process>
							<substep>Create or append to temp_pr_analysis.md</substep>
							<substep>Include structured data for this PR</substep>
							<substep>Store all contributor information</substep>
							<substep>Include categorization and user impact analysis</substep>
						</process>
						<file_format>
							Use a consistent markdown format that can be easily parsed later
							for generating the final release notes
						</file_format>
					</step>
				</per_pr_steps>
				
				<completion_per_pr>
					After each PR analysis is complete and written to the temporary file,
					move on to the next PR. This ensures thorough investigation of each
					change before proceeding.
				</completion_per_pr>
			</iterative_workflow>
		</phase>
		<phase name="compile_final_release_notes">
			<description>Read the temporary analysis file and compile all findings into the final release notes format</description>
			<steps>
				<step number="1">
					<action>Read temporary analysis file</action>
					<details>
						Read the complete temp_pr_analysis.md file that contains all individual PR investigations
					</details>
				</step>
				<step number="2">
					<action>Group and organize findings</action>
					<details>
						Group PRs by category (Bug Fixes, QOL Improvements, Provider Updates, etc.)
						based on the analysis stored for each PR
					</details>
				</step>
				<step number="3">
					<action>Format for release notes</action>
					<details>
						Transform the organized findings into the final release notes format
						with proper acknowledgments and user-friendly language
					</details>
				</step>
				<step number="4">
					<action>Clean up temporary file</action>
					<details>
						Optionally remove or archive the temporary analysis file after successful completion
					</details>
				</step>
			</steps>
		</phase>
		<phase name="generate_documentation">
			<description>Create and update all necessary documentation files</description>
			<steps>
				<step number="1">
					<action>Create release notes file</action>
					<details>
            Create docs/update-notes/vX.Y.Z.mdx with proper formatting,
            title, date, and organized sections
          </details>
				</step>
				<step number="2">
					<action>Update index.md</action>
					<details>
            Add new release entry to the chronological list with proper link format
          </details>
				</step>
				<step number="3">
					<action>Update sidebars.ts</action>
					<details>
            Add the new release to the Update Notes section in the sidebar configuration
          </details>
				</step>
				<step number="4">
					<action>Update combined release notes</action>
					<details>
            For patch releases, update the corresponding minor/major release file
            (e.g., update v3.20.mdx when creating v3.20.3.mdx)
          </details>
				</step>
			</steps>
		</phase>
	</main_workflow>

  <completion_criteria>
    <criterion>Release notes file created with proper formatting</criterion>
    <criterion>All PRs analyzed and converted to user benefits</criterion>
    <criterion>Index and sidebar files updated</criterion>
    <criterion>Combined release notes updated (for patch releases)</criterion>
    <criterion>All links and references are correct</criterion>
    <criterion>The final release notes need to specifically include only the items (or groups) referred to in the changelog for the version we are working on</criterion>
  </completion_criteria>
</workflow_instructions>
