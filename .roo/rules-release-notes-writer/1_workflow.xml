<workflow_instructions>
  <mode_overview>
    The Release Notes Writer mode automates the creation of release notes for new versions of Roo Code.
    It fetches pull request information from GitHub, analyzes changes, and generates user-friendly
    release notes following the project's documentation standards.
  </mode_overview>

  <initialization_steps>
    <step number="1">
      <action>Receive version number from user</action>
      <details>
        The user provides the new version number (e.g., 3.20.3) to begin the workflow
      </details>
    </step>
    
    <step number="2">
      <action>Determine version range</action>
      <tools>
        <tool>list_files - Find previous version in docs/update-notes</tool>
      </tools>
      <details>
        List files in docs/update-notes to identify the most recent version file
        and establish the range for fetching changes
      </details>
    </step>
  </initialization_steps>

	<main_workflow>
		<phase name="gather_technical_information">
			<description>Collect PR data from GitHub. This phase is skipped if the user provides a list of PR numbers.</description>
			<steps>
		             <step number="1">
		                 <action>Check for user-provided PR list</action>
		                 <details>If the user provides a list of PR numbers with the version, skip to the 'process_each_pr' phase.</details>
		             </step>
				<step number="2">
					<action>Fetch release dates</action>
					<tool>github.get_tag</tool>
					<details>Get the commit dates for both new and previous version tags to establish a date range.</details>
				</step>
				<step number="3">
					<action>Search for merged PRs within the date range</action>
					<tool>github.search_issues</tool>
					<details>
		          Use the release date range to search for all merged PRs.
		          Example query: `is:pr is:merged repo:RooCodeInc/Roo-Code merged:YYYY-MM-DD..YYYY-MM-DD`
		        </details>
				</step>
			</steps>
		</phase>
		<phase name="process_each_pr">
			<description>Process PRs individually by creating subtasks for each PR investigation, storing findings in a temporary file for later compilation.</description>
			<subtask_workflow>
				<overview>
					For each PR in the list, create a dedicated subtask using the new_task tool.
					Each subtask will investigate one PR thoroughly and store findings in temp_pr_analysis.md.
					This allows for clear separation of concerns and incremental progress tracking.
				</overview>
				
				<per_pr_steps>
					<step number="1">
						<action>Create PR investigation subtask</action>
						<tool>new_task</tool>
						<details>
							Create a new task in release-notes-writer mode to investigate the specific PR
						</details>
						<message_format>
							Investigate PR #[number] for release notes v[version].
							
							Your task is to:
							1. Get full PR details using github.get_pull_request
							2. Extract any linked issues from the PR description (e.g., "Fixes #123")
							3. Get details for each linked issue using github.get_issue
							4. Analyze the change and categorize it (bug fix, feature, improvement, etc.)
							5. Write your findings to temp_pr_analysis.md in the specified format
							
							Use insert_content with line 0 to append to the file.
						</message_format>
					</step>
					
					<step number="2">
						<action>Wait for subtask completion</action>
						<details>
							The subtask will handle all investigation steps:
							- Fetching PR details and linked issues
							- Analyzing and categorizing the change
							- Writing structured findings to temp_pr_analysis.md
							- Reporting completion via attempt_completion
						</details>
					</step>
					
					<step number="3">
						<action>Move to next PR</action>
						<details>
							After subtask completion confirmation, proceed to create the next PR investigation subtask
						</details>
					</step>
				</per_pr_steps>
				
				<completion_per_pr>
					After each subtask completes and confirms it has written findings to the temporary file,
					move on to the next PR. This ensures thorough investigation of each change before proceeding.
				</completion_per_pr>
			</subtask_workflow>
		</phase>
		<phase name="compile_final_release_notes">
			<description>Read the temporary analysis file and compile all findings into the final release notes format</description>
			<steps>
				<step number="1">
					<action>Read temporary analysis file</action>
					<details>
						Read the complete temp_pr_analysis.md file that contains all individual PR investigations
					</details>
				</step>
				<step number="2">
					<action>Group and organize findings</action>
					<details>
						Group PRs by category (Bug Fixes, QOL Improvements, Provider Updates, etc.)
						based on the analysis stored for each PR
					</details>
				</step>
				<step number="3">
					<action>Format for release notes</action>
					<details>
						Transform the organized findings into the final release notes format
						with proper acknowledgments and user-friendly language
					</details>
				</step>
				<step number="4">
					<action>Clean up temporary file</action>
					<details>
						Optionally remove or archive the temporary analysis file after successful completion
					</details>
				</step>
			</steps>
		</phase>
		<phase name="generate_documentation">
			<description>Create and update all necessary documentation files</description>
			<steps>
				<step number="1">
					<action>Create release notes file</action>
					<details>
            Create docs/update-notes/vX.Y.Z.mdx with proper formatting,
            title, date, and organized sections
          </details>
				</step>
				<step number="2">
					<action>Update index.md</action>
					<details>
            Add new release entry to the chronological list with proper link format
          </details>
				</step>
				<step number="3">
					<action>Update sidebars.ts</action>
					<details>
            Add the new release to the Update Notes section in the sidebar configuration
          </details>
				</step>
				<step number="4">
					<action>Update combined release notes</action>
					<details>
            For patch releases, update the corresponding minor/major release file
            (e.g., update v3.20.mdx when creating v3.20.3.mdx)
          </details>
				</step>
			</steps>
		</phase>
		<phase name="discord_formatting" optional="true">
			<description>Generate Discord-formatted release notes by creating a subtask that converts the existing release notes to Discord format</description>
			<when_to_use>Use this phase when the user specifically asks for Discord formatting of the release notes</when_to_use>
			<steps>
				<step number="1">
					<action>Create Discord formatting subtask</action>
					<tool>new_task</tool>
					<details>
						Create a new task in release-notes-writer mode to generate Discord-formatted release notes
						based on the completed release notes file
					</details>
					<task_instructions>
						Generate Discord-formatted release notes for version X.Y.Z.

						Requirements:
						1. Strip all PR links and references to PR numbers (#XXXX)
						2. Keep structure and content identical to the existing release notes
						3. Replace all internal documentation links to use https://docs.roocode.com/ prefix
						4. If requested to compress sections, summarize using this format:
						   ## :wrench: [Other Improvements and Fixes](https://docs.roocode.com/update-notes/vX.Y.Z#section-anchor)
						   This release includes X additional enhancements, covering [list key areas]. A huge thank you to the contributors in these sections: [list contributors]!
						5. At the bottom, include links to full release notes:
						   [Full X.Y.Z Release Notes](https://docs.roocode.com/update-notes/vX.Y.Z)
						
						Convert the release notes from docs/update-notes/vX.Y.Z.mdx to Discord format.
					</task_instructions>
				</step>
				<step number="2">
					<action>Handle compression requests</action>
					<details>
						If the user asks to compress specific sections, the subtask should:
						- Summarize the overall changes of the requested sections/points
						- Use the specified format for compressed sections
						- Thank only contributors from the compressed sections, not the overall release
						- Maintain links to the full release notes for detailed information
					</details>
				</step>
			</steps>
		</phase>
	</main_workflow>

		<completion_criteria>
    <criterion>Release notes file created with proper formatting</criterion>
    <criterion>All PRs analyzed and converted to user benefits</criterion>
    <criterion>Index and sidebar files updated</criterion>
    <criterion>Combined release notes updated (for patch releases)</criterion>
    <criterion>All links and references are correct</criterion>
    <criterion>The final release notes need to specifically include only the items (or groups) referred to in the changelog for the version we are working on</criterion>
  </completion_criteria>
</workflow_instructions>
