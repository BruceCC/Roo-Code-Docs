<workflow_instructions>
  <mode_overview>
    Automates creating release notes for new Roo Code versions. Fetches pull requests
    from GitHub, analyzes changes, generates user-focused notes, and handles Discord
    formatting. Supports version-only requests and auto-detection of missing versions.
  </mode_overview>

  <entry_patterns>
    <pattern type="create_new">
      <trigger>Create release notes for X.Y.Z</trigger>
      <action>Full release notes workflow</action>
    </pattern>
    <pattern type="discord_only">
      <trigger>Discord release notes for X.Y.Z</trigger>
      <action>Generate Discord format from existing files</action>
    </pattern>
    <pattern type="discord_combined">
      <trigger>Combined Discord announcement for X.Y.Z, X.Y.Z, and X.Y.Z</trigger>
      <action>Generate combined Discord format from multiple release files</action>
    </pattern>
    <pattern type="version_only">
      <trigger>^v?[\d.]+$</trigger>
      <action>Extract PR list and ask how to proceed</action>
    </pattern>
    <pattern type="latest">
      <trigger>latest</trigger>
      <action>Auto-detect missing versions from changelog</action>
    </pattern>
  </entry_patterns>

  <critical_date_format>
    <format>ISO 8601: YYYY-MM-DD</format>
    <specification>
      - YYYY = 4-digit year (e.g., 2025)
      - MM = 2-digit MONTH (01-12) - NOT the day!
      - DD = 2-digit day (01-31)
    </specification>
    <examples>
      <correct>2025-07-18 (July 18, 2025)</correct>
      <correct>2025-01-13 (January 13, 2025)</correct>
      <incorrect>2025-18-07 (Invalid - would mean 18th month)</incorrect>
    </examples>
    <implementation>
      When PR list provided directly: Use new Date().toISOString().split('T')[0]
    </implementation>
  </critical_date_format>

  <main_workflow>
    <phase name="initialization">
      <step number="1">
        <action>Analyze request type and route to appropriate workflow</action>
        <decision_tree>
          <if condition="latest">Execute latest_version_detection</if>
          <if condition="discord_only">Execute discord_workflow</if>
          <if condition="version_only">Execute pr_extraction_workflow</if>
          <else>Continue with standard workflow</else>
        </decision_tree>
      </step>
      
      <step number="2">
        <action>Initialize tracking</action>
        <tool>update_todo_list</tool>
        <todos>
          - Determine version range
          - Fetch PRs (if needed)
          - Process and analyze PRs
          - Create documentation files
          - Update indexes and sidebars
          - Handle user review
        </todos>
      </step>
    </phase>

    <phase name="data_collection">
      <step number="1">
        <action>Determine version range</action>
        <tool>list_files in docs/update-notes</tool>
      </step>
      
      <step number="2" optional="true">
        <action>Handle user-provided PR list</action>
        <when>User provides PR numbers directly</when>
        <critical>Validate date format (MM is month, not day)</critical>
      </step>
      
      <step number="3">
        <action>Fetch PRs from GitHub</action>
        <skip_if>User provided PR list</skip_if>
        <commands>
          <get_tag_date><![CDATA[
gh api repos/RooCodeInc/Roo-Code/git/refs/tags/vX.Y.Z --jq '.object.sha' | xargs -I {} gh api repos/RooCodeInc/Roo-Code/git/commits/{} --jq '.committer.date'
          ]]></get_tag_date>
          <search_prs><![CDATA[
gh pr list --repo RooCodeInc/Roo-Code --state merged --search "merged:YYYY-MM-DD..YYYY-MM-DD" --json number,title,author,mergedAt --limit 1000
          ]]></search_prs>
        </commands>
      </step>
    </phase>

    <phase name="pr_processing">
      <initialization priority="CRITICAL">
        <action>Create temp_pr_analysis.md</action>
        <details>
          Parent task MUST create this file before ANY subtasks.
          Subtasks will ONLY append using insert_content.
        </details>
      </initialization>
      
      <subtask_pattern>
        <for_each>PR in list</for_each>
        <action>Create investigation subtask</action>
        <mode>release-notes-writer</mode>
        <message><![CDATA[
Investigate PR #[number] for release notes v[version].
1. Get PR details (gh pr view)
2. Extract linked issues
3. Get issue details
4. Categorize change
5. Identify documentation needs (new features, behavior changes, deprecations)
6. Append to temp_pr_analysis.md using insert_content line 0

Include documentation flags:
- docs-new: Completely new feature
- docs-update: Existing docs need updating
- docs-example: New examples needed
- docs-migration: Breaking changes

CRITICAL: Never create/overwrite files, only append.
        ]]></message>
      </subtask_pattern>
      
      <output_format><![CDATA[
## PR #[number]: [Title]

**Author**: [username]
**Linked Issues**: #[issue] (reporter: [username])
**Category**: [Category]
**User Impact**: [Benefit description]
**Contributors**: [list]
**Documentation Needs**: [none|docs-new|docs-update|docs-example|docs-migration]
**Documentation Notes**: [If applicable, what needs documenting]

---
      ]]></output_format>
    </phase>

    <phase name="compilation">
      <step number="1">
        <action>Read and organize PR findings</action>
        <categories>Features, QOL Improvements, Bug Fixes, Provider Updates</categories>
        <critical>QOL Improvements MUST come before Bug Fixes</critical>
      </step>
      
      <step number="2">
        <action>Confirm feature highlighting with user</action>
        <tool>ask_followup_question</tool>
        <template><![CDATA[
I've analyzed all PRs for v[VERSION]. Here are the changes I found:

**Major Features:**
[List major features with brief descriptions]

**Bug Fixes:** [COUNT] fixes
**QOL Improvements:** [COUNT] improvements
**Other Changes:** [COUNT] items

Which features should I highlight with expanded sections in the release notes?
        ]]></template>
        <critical>Must get explicit confirmation before writing notes</critical>
      </step>
      
      <step number="3">
        <action>Create release notes file</action>
        <format>docs/update-notes/vX.Y.Z.mdx</format>
      </step>
      
      <step number="4">
        <action>For patch releases: Get user confirmation</action>
        <critical>
          Do NOT update combined notes until user confirms patch notes are final
        </critical>
      </step>
      
      <step number="5">
        <action>Update documentation indexes</action>
        <files>
          - index.md (chronological list)
          - sidebars.ts (navigation)
          - Combined notes for patch releases (ONLY after confirmation)
        </files>
      </step>
      
      <step number="6">
        <action>Create documentation update task</action>
        <when>If any documentation flags were identified</when>
        <tool>new_task with mode="documentation-writer"</tool>
      </step>
    </phase>
  </main_workflow>

  <special_workflows>
    <workflow name="discord_only">
      <description>Generate Discord format from existing release files</description>
      <transformations>
        - Remove PR links and numbers
        - Convert /path to https://docs.roocode.com/path
        - Add footer link with markdown format
        - Handle compression if requested
        - Wrap entire output in markdown code block
      </transformations>
      <formatting_rules>
        <rule>Title format: # ðŸš€ Roo Code X.Y.Z Release Notes</rule>
        <rule>Include summary in intro sentence listing key features</rule>
        <rule>Use "Feature Highlights" instead of "Major Features"</rule>
        <rule>Never use the word "powerful"</rule>
        <rule>No version numbers in body text (only header/footer)</rule>
        <rule>No "Happy coding!" or similar closings</rule>
        <rule>Footer: ðŸ“š **Full Release Notes** [vX.Y.Z](link)</rule>
      </formatting_rules>
      <output>Formatted text wrapped in ```markdown code block (no files created)</output>
    </workflow>

    <workflow name="discord_combined">
      <description>Generate combined Discord format from multiple release files</description>
      <steps>
        <step>Read all specified release note files</step>
        <step>Merge and deduplicate features across versions</step>
        <step>Create unified summary sentence</step>
        <step>Apply Discord formatting rules</step>
      </steps>
      <formatting_rules>
        <rule>Title format: # ðŸš€ Roo Code X.Y.Z-X.Y.Z Release Updates</rule>
        <rule>Intro sentence summarizes all key features from all versions</rule>
        <rule>Combine similar sections across versions</rule>
        <rule>Footer with links to each version: [vX.Y.Z](link) | [vX.Y.Z](link)</rule>
        <rule>Wrap entire output in ```markdown code block</rule>
      </formatting_rules>
      <output>Combined formatted text (no files created)</output>
    </workflow>

    <workflow name="version_only">
      <description>Extract PR list when user provides just a version</description>
      <steps>
        <step>Spawn PR extraction subtask using new_task with mode="release-notes-writer"</step>
        <step>Subtask writes PR list to temp_pr_list.md</step>
        <step>Ask user how to proceed</step>
      </steps>
      <implementation>
        <tool>new_task</tool>
        <mode>release-notes-writer</mode>
        <message>Extract PR list for version [VERSION] and write to temp_pr_list.md</message>
      </implementation>
    </workflow>

    <workflow name="latest">
      <description>Auto-detect missing versions</description>
      <steps>
        <step>Find most recent release notes</step>
        <step>Read changelog or GitHub releases</step>
        <step>Identify missing versions</step>
        <step>Ask which to process</step>
      </steps>
    </workflow>
  </special_workflows>

  <critical_rules>
    <rule priority="CRITICAL">
      Date format is YYYY-MM-DD (ISO 8601) where MM is month (01-12)
    </rule>
    <rule priority="CRITICAL">
      Parent task creates temp files, subtasks only append
    </rule>
    <rule priority="HIGH">
      Always acknowledge PR author AND issue reporter
    </rule>
    <rule priority="HIGH">
      Focus on user benefits, not technical implementation
    </rule>
    <rule priority="HIGH">
      QOL Improvements section MUST come before Bug Fixes
    </rule>
  </critical_rules>
</workflow_instructions>