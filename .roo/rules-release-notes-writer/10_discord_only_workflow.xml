<discord_only_workflow_instructions>
  <overview>
    Specialized workflow for generating Discord-formatted release notes from existing release files.
    This allows users to quickly get Discord-ready announcements without creating release notes from scratch.
  </overview>

  <entry_patterns>
    <description>
      User messages that trigger the Discord-only workflow
    </description>
    <patterns>
      <pattern>Discord release notes for X.Y.Z</pattern>
      <pattern>Generate Discord format for vX.Y.Z</pattern>
      <pattern>Discord announcement for X.Y.Z, A.B.C, D.E.F</pattern>
      <pattern>Discord notes for v3.23.14</pattern>
      <pattern>Discord release notes for 3.23.14, 3.23.15</pattern>
    </patterns>
  </entry_patterns>

  <workflow_steps>
    <step number="1">
      <title>Parse Version Numbers</title>
      <action>Extract version numbers from user request</action>
      <details>
        Support multiple formats:
        - Single version: "3.23.14" or "v3.23.14"
        - Multiple versions: "3.23.14, 3.23.15, 3.23.16"
        - Mixed formats: "v3.23.14, 3.23.15, v3.23.16"
      </details>
      <parsing_rules>
        <rule>Strip 'v' prefix if present</rule>
        <rule>Split by commas for multiple versions</rule>
        <rule>Trim whitespace</rule>
        <rule>Validate version format (X.Y.Z)</rule>
      </parsing_rules>
    </step>

    <step number="2">
      <title>Check File Existence</title>
      <action>Verify release notes files exist</action>
      <tool>list_files</tool>
      <details>
        Check docs/update-notes/ for each requested version file (vX.Y.Z.mdx)
      </details>
      <error_handling>
        <missing_files>
          <action>Report which versions are missing</action>
          <example><![CDATA[
<ask_followup_question>
<question>I couldn't find release notes for the following versions: v3.23.16, v3.23.17. Would you like me to:</question>
<follow_up>
<suggest>Generate Discord notes for the versions that exist (3.23.14, 3.23.15)</suggest>
<suggest mode="release-notes-writer">Create release notes for v3.23.16 first</suggest>
<suggest>Cancel this request</suggest>
</follow_up>
</ask_followup_question>
          ]]></example>
        </missing_files>
      </error_handling>
    </step>

    <step number="3">
      <title>Process Each Version Using Subtasks</title>
      <action>Create Discord formatting subtask for each existing version</action>
      <details>
        For each version that exists, create a subtask to handle the Discord formatting.
        This ensures consistency with the standard workflow's Discord formatting approach.
      </details>
      <substeps>
        <substep number="1">
          <action>Create temporary results file</action>
          <tool>write_to_file</tool>
          <file>temp_discord_results.md</file>
          <content># Discord Release Notes Results

</content>
          <details>Initialize a file to collect results from subtasks</details>
        </substep>
        <substep number="2">
          <action>Create Discord formatting subtask for each version</action>
          <tool>new_task</tool>
          <details>
            For each existing version, create a release-notes-writer subtask.
          </details>
          <message_format>
            Generate Discord-formatted release notes for version X.Y.Z.

            Requirements:
            1. Strip all PR links and numbers (#XXXX).
            2. Keep structure and content.
            3. Prepend https://docs.roocode.com/ to all internal doc links.
            4. If compressing, summarize with this format:
               ## :wrench: [Other Improvements and Fixes](https://docs.roocode.com/update-notes/vX.Y.Z#section-anchor)
               This release includes X other fixes covering [list key areas]. Thanks to contributors: [list contributors].
            5. Add footer link:
               [Full X.Y.Z Release Notes](https://docs.roocode.com/update-notes/vX.Y.Z)
            
            Convert docs/update-notes/vX.Y.Z.mdx to Discord format.
            Write the result to temp_discord_release_notes.md.
            
            Special handling: [Include any compression or highlights-only requests from user]
          </message_format>
        </substep>
        <substep number="3">
          <action>Wait for subtask completion</action>
          <details>
            The subtask will handle reading the file, applying transformations, and writing results.
          </details>
        </substep>
        <substep number="4">
          <action>Read subtask results and append to collection</action>
          <tool>read_file</tool>
          <file>temp_discord_release_notes.md</file>
          <details>
            After each subtask completes, read its output and append to the results collection.
          </details>
        </substep>
      </substeps>
    </step>

    <step number="4">
      <title>Combine Multiple Versions</title>
      <action>When multiple versions requested, intelligently combine content</action>
      <combination_strategy>
        <substep number="1">
          <action>Sort versions in descending order (newest first)</action>
          <reason>Present most recent changes first for better visibility</reason>
        </substep>
        <substep number="2">
          <action>Extract and merge content by category</action>
          <categories>
            <category name="major_features">
              <description>Combine all major features across versions</description>
              <format>List under unified "## Major Features" section</format>
            </category>
            <category name="bug_fixes">
              <description>Merge all bug fixes</description>
              <format>Group under "## Bug Fixes" with version indicators</format>
            </category>
            <category name="improvements">
              <description>Combine QOL and other improvements</description>
              <format>List under "## Improvements" section</format>
            </category>
          </categories>
        </substep>
        <substep number="3">
          <action>Add version indicators to each item</action>
          <format>Append (vX.Y.Z) to each bullet point</format>
          <example>* **File Handling**: Fixed large file errors (v3.23.15) (thanks user!)</example>
        </substep>
        <substep number="4">
          <action>Consolidate duplicate contributors</action>
          <details>If same contributor appears in multiple versions, list once</details>
        </substep>
      </combination_strategy>
    </step>

    <step number="5">
      <title>Compile and Format Final Output</title>
      <action>Read all subtask results and format based on version count</action>
      <substeps>
        <substep number="1">
          <action>Read collected results</action>
          <tool>read_file</tool>
          <file>temp_discord_results.md</file>
          <details>Read all Discord-formatted content from subtasks</details>
        </substep>
        <substep number="2">
          <action>Determine output format</action>
          <details>
            Based on number of versions and user preferences, choose appropriate format:
            - Single version: Present as-is from subtask
            - Multiple versions with "combine" request: Merge into unified sections
            - Multiple versions default: Present separately
          </details>
        </substep>
        <substep number="3">
          <action>Apply final formatting if needed</action>
          <details>
            For multiple versions, may need to:
            - Combine sections by category
            - Add version indicators to items
            - Consolidate duplicate contributors
            - Create unified header and footer
          </details>
        </substep>
      </substeps>
      <single_version_note>
        For single versions, the subtask output can be used directly without additional formatting.
      </single_version_note>
      <multiple_versions_note>
        For multiple versions, additional processing may be needed to combine or organize the content appropriately.
      </multiple_versions_note>
    </step>

    <step number="6">
      <title>Provide Copy Instructions</title>
      <action>Give user the formatted text with copy guidance</action>
      <completion_message>
        Here's the Discord-formatted release notes. You can copy and paste this directly into Discord.
        
        [Include formatted text in a code block for easy copying]
      </completion_message>
      <length_warning>
        <condition>If output exceeds 2000 characters</condition>
        <action>Warn user about Discord's character limit and suggest splitting</action>
      </length_warning>
    </step>
  </workflow_steps>

  <implementation_details>
    <detail name="no_permanent_files">
      <description>This workflow does not create or modify any permanent files</description>
      <reason>It only reads existing files and uses temporary files for subtask coordination</reason>
    </detail>
    <detail name="no_github_api">
      <description>No GitHub API calls are needed</description>
      <reason>All information comes from existing release note files</reason>
    </detail>
    <detail name="subtask_based">
      <description>Uses subtasks for consistency with standard workflow</description>
      <reason>Ensures Discord formatting logic remains consistent across all workflows</reason>
    </detail>
    <detail name="temporary_files">
      <description>Uses temporary files for subtask communication</description>
      <files>
        <file>temp_discord_results.md - Collects all subtask outputs</file>
        <file>temp_discord_release_notes.md - Individual subtask output</file>
      </files>
    </detail>
  </implementation_details>

  <examples>
    <example name="single_version">
      <user_request>Discord release notes for 3.23.14</user_request>
      <workflow>
        1. Parse version: 3.23.14
        2. Check file exists: docs/update-notes/v3.23.14.mdx ✓
        3. Create Discord formatting subtask
        4. Subtask reads file and transforms content
        5. Read subtask output and present to user
      </workflow>
    </example>

    <example name="multiple_versions_separate">
      <user_request>Generate Discord announcement for v3.23.14, v3.23.15, v3.23.16</user_request>
      <workflow>
        1. Parse versions: 3.23.14, 3.23.15, 3.23.16
        2. Check files: v3.23.14.mdx ✓, v3.23.15.mdx ✓, v3.23.16.mdx ✗
        3. Ask user how to proceed with missing v3.23.16
        4. Create subtasks for existing versions
        5. Collect subtask outputs
        6. Format as separate sections for each version
        7. Output Discord announcement with version sections
      </workflow>
    </example>

    <example name="multiple_versions_combined">
      <user_request>Combine Discord release notes for 3.23.14 and 3.23.15</user_request>
      <workflow>
        1. Parse versions: 3.23.14, 3.23.15
        2. Check both files exist
        3. Create subtasks for each version
        4. Collect subtask outputs
        5. Detect "combine" keyword - use combined format
        6. Merge features, fixes, and improvements with version tags
        7. Output single combined announcement
      </workflow>
    </example>

    <example name="with_compression">
      <user_request>Discord notes for 3.23.14, compress the minor fixes</user_request>
      <workflow>
        1. Parse version and compression request
        2. Check file exists
        3. Create subtask with compression instructions
        4. Subtask applies compression during transformation
        5. Output condensed Discord format
      </workflow>
    </example>

    <example name="range_request_combined">
      <user_request>Discord release notes for 3.23.14-3.23.16 combined</user_request>
      <workflow>
        1. Parse range: 3.23.14 to 3.23.16
        2. Find all versions in range
        3. Create subtasks for each version
        4. Collect all subtask outputs
        5. Combine into unified sections with version indicators
        6. Output merged announcement
      </workflow>
    </example>
  </examples>

  <error_scenarios>
    <scenario name="no_versions_found">
      <trigger>User provides version numbers but no files exist</trigger>
      <response>Explain that no release notes exist and offer to create them</response>
    </scenario>
    <scenario name="invalid_version_format">
      <trigger>User provides invalid version format (e.g., "3.23" without patch)</trigger>
      <response>Ask for clarification on the full version number</response>
    </scenario>
    <scenario name="ambiguous_request">
      <trigger>Unclear if user wants Discord format or full release notes</trigger>
      <response>Ask for clarification with suggested options</response>
    </scenario>
  </error_scenarios>
</discord_only_workflow_instructions>